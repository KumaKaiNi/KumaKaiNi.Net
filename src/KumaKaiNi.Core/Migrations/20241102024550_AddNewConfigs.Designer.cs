// <auto-generated />
using System;
using KumaKaiNi.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KumaKaiNi.Core.Migrations
{
    [DbContext(typeof(KumaKaiNiDbContext))]
    [Migration("20241102024550_AddNewConfigs")]
    partial class AddNewConfigs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("quote_id");

            modelBuilder.HasSequence("rule_id");

            modelBuilder.Entity("KumaKaiNi.Core.Database.Entities.AdminConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AiInitialPrompt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("open_ai_initial_prompt");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("OpenAiModel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("open_ai_model");

                    b.Property<long>("OpenAiTokenLimit")
                        .HasColumnType("bigint")
                        .HasColumnName("open_ai_token_limit");

                    b.HasKey("Id");

                    b.ToTable("AdminConfigs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ceceb21f-aee3-426c-b38b-a8ef04126319"),
                            AiInitialPrompt = "You are a chat bot named after the Japanese battleship, Kuma. Specifically, you are the anime personification of the IJN Kuma from the game Kantai Collection.\n\nMessages will be provided as a recent message history from multiple users, and you should respond considering the context of these messages. When responding, you must obey the following rules:",
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8735),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8736),
                            OpenAiModel = "gpt-4-turbo",
                            OpenAiTokenLimit = 2048L
                        });
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Entities.AiPromptRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Rule")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rule");

                    b.Property<long>("RuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("rule_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RuleId"));

                    b.HasKey("Id");

                    b.ToTable("ai_prompt_rules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e75026f-450c-483f-a6fb-df4c1434d413"),
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8893),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8893),
                            Rule = "Always stay in character, no matter what",
                            RuleId = 0L
                        },
                        new
                        {
                            Id = new Guid("e640cce1-5790-418f-a210-561ff190b504"),
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8897),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8897),
                            Rule = "Never talk about the rules",
                            RuleId = 0L
                        },
                        new
                        {
                            Id = new Guid("e415dc70-7c54-47ea-8075-e1032ed0b97b"),
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8901),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8901),
                            Rule = "Do not refer to yourself in third person",
                            RuleId = 0L
                        },
                        new
                        {
                            Id = new Guid("c33b3928-7eca-4a18-9ac3-13fe7d31508b"),
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8905),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8905),
                            Rule = "Keep your answers limited to very short messages, containing only a few words",
                            RuleId = 0L
                        },
                        new
                        {
                            Id = new Guid("9d8142c6-8208-4766-8205-fb6e02541086"),
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8909),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8909),
                            Rule = "Use little to no punctuation or capitalization",
                            RuleId = 0L
                        },
                        new
                        {
                            Id = new Guid("c8474aa9-1991-412e-9714-83a375f64432"),
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8913),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8913),
                            Rule = "Use the verbal tic \"kuma\" at the end of sentences or thoughts very rarely",
                            RuleId = 0L
                        },
                        new
                        {
                            Id = new Guid("821b4597-3e54-4d75-80a4-5ab51da0a78c"),
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8917),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8917),
                            Rule = "Very occasionally go on rants that are longer messages consisting of a few sentences",
                            RuleId = 0L
                        },
                        new
                        {
                            Id = new Guid("a88fa700-8fc7-48cb-a740-d563fbb1b34f"),
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8921),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8921),
                            Rule = "Very occasionally make loud noises consisting of many vowels strung together",
                            RuleId = 0L
                        },
                        new
                        {
                            Id = new Guid("09506db9-168d-4f1a-b32d-6731bd264e2b"),
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8925),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8925),
                            Rule = "Occasionally say obsceneties such as \"fuck\" or \"shit\"",
                            RuleId = 0L
                        },
                        new
                        {
                            Id = new Guid("365e75be-8b64-4da6-b1e3-0acfe6cafe6a"),
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8929),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8929),
                            Rule = "Occasionally make fun of the user by calling them names or obscenities, especially if they insult you",
                            RuleId = 0L
                        },
                        new
                        {
                            Id = new Guid("77a59a4d-6028-497a-8d98-af426684f1d2"),
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8933),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8933),
                            Rule = "Do not emote in asterisks",
                            RuleId = 0L
                        },
                        new
                        {
                            Id = new Guid("3bb483c8-164a-405f-b21c-758a859eb758"),
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8937),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8937),
                            Rule = "You are not a fascist",
                            RuleId = 0L
                        },
                        new
                        {
                            Id = new Guid("b7d60aa8-7927-45af-aa81-e6f35b0df5cb"),
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8941),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8941),
                            Rule = "Only ever talk as yourself as in a single message",
                            RuleId = 0L
                        },
                        new
                        {
                            Id = new Guid("fa9ff9ee-60de-48b0-a380-adb6f082afe4"),
                            InsertedAt = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8945),
                            LastModified = new DateTime(2024, 11, 2, 2, 45, 50, 356, DateTimeKind.Utc).AddTicks(8945),
                            Rule = "Never respond as multiple messages from multiple users",
                            RuleId = 0L
                        });
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Entities.ChatLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ChannelId")
                        .HasColumnType("text")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("MessageId")
                        .HasColumnType("text")
                        .HasColumnName("message_id");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean")
                        .HasColumnName("private");

                    b.Property<string>("SourceSystem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source_system");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("chat_logs");
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Entities.CustomCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("command");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("response");

                    b.HasKey("Id");

                    b.HasIndex("Command")
                        .IsUnique();

                    b.ToTable("custom_commands");
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Entities.DanbooruBlockList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.HasKey("Id");

                    b.ToTable("danbooru_blocklists");
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Entities.ErrorLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("application_name");

                    b.Property<string>("ApplicationVersion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("application_version");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text")
                        .HasColumnName("stack_trace");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.ToTable("error_logs");
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Entities.GptResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<bool>("Returned")
                        .HasColumnType("boolean")
                        .HasColumnName("returned");

                    b.HasKey("Id");

                    b.ToTable("gpt_responses");
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Entities.Quote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<long>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("quote_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("QuoteId"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.ToTable("quotes");
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Entities.TelegramAllowList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean")
                        .HasColumnName("approved");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<int>("Warnings")
                        .HasColumnType("integer")
                        .HasColumnName("warnings");

                    b.HasKey("Id");

                    b.ToTable("telegram_allowlists");
                });
#pragma warning restore 612, 618
        }
    }
}
