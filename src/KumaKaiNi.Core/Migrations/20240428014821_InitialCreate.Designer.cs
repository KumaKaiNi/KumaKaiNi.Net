// <auto-generated />
using System;
using KumaKaiNi.Core;
using KumaKaiNi.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KumaKaiNi.Core.Migrations
{
    [DbContext(typeof(KumaKaiNiDbContext))]
    [Migration("20240428014821_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KumaKaiNi.Core.Database.Models.CustomCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Command")
                        .HasColumnType("text")
                        .HasColumnName("command");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Response")
                        .HasColumnType("text")
                        .HasColumnName("response");

                    b.HasKey("Id")
                        .HasName("custom_commands_pkey");

                    b.ToTable("custom_commands", (string)null);
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Models.DanbooruBlocklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Tag")
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.HasKey("Id")
                        .HasName("danbooru_blocklists_pkey");

                    b.ToTable("danbooru_blocklists", (string)null);
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Models.DanbooruCache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<DateTime?>("Expires")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Protocol")
                        .HasColumnType("text")
                        .HasColumnName("protocol");

                    b.HasKey("Id")
                        .HasName("danbooru_caches_pkey");

                    b.ToTable("danbooru_caches", (string)null);
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Models.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text")
                        .HasColumnName("stack_trace");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("errors_pkey");

                    b.ToTable("errors", (string)null);
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Models.GptResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<bool?>("Returned")
                        .HasColumnType("boolean")
                        .HasColumnName("returned");

                    b.HasKey("Id")
                        .HasName("gpt_responses_pkey");

                    b.ToTable("gpt_responses", (string)null);
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<long?>("MessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    b.Property<bool?>("Private")
                        .HasColumnType("boolean")
                        .HasColumnName("private");

                    b.Property<string>("Protocol")
                        .HasColumnType("text")
                        .HasColumnName("protocol");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("logs_pkey");

                    b.ToTable("logs", (string)null);
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("quotes_pkey");

                    b.ToTable("quotes", (string)null);
                });

            modelBuilder.Entity("KumaKaiNi.Core.Database.Models.TelegramAllowlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('telegram_whitelists_id_seq'::regclass)");

                    b.Property<bool?>("Approved")
                        .HasColumnType("boolean")
                        .HasColumnName("approved");

                    b.Property<long?>("ChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("channel_id");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("inserted_at");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified");

                    b.Property<int?>("Warnings")
                        .HasColumnType("integer")
                        .HasColumnName("warnings");

                    b.HasKey("Id")
                        .HasName("telegram_whitelists_pkey");

                    b.ToTable("telegram_allowlists", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
